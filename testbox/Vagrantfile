# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'json'

# Default VM size configuration
vm_config = {
    "cpus" => 2,
    "memory" => 4096,
    "disksize" => "10GB"
}
# Load optional config overrides
vm_config_path = File.dirname(__FILE__) + "/.vm_config.json"
if File.exists?(vm_config_path)
    vm_config_overrides = JSON.parse(File.read(vm_config_path))
    vm_config = vm_config.merge(vm_config_overrides)
end


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"
  config.disksize.size = vm_config["disksize"]

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  #config.vm.network :forwarded_port, guest: 14563, host: 14563

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "~", "/host_home"

  # Provider-specific configuration
  config.vm.provider "virtualbox" do |v|
    v.name = "envy_ubuntu_test_box"
    v.memory = vm_config["memory"]
    v.cpus = vm_config["cpus"]

    v.customize ["modifyvm", :id, "--vram", "128"]
    v.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # install required packages
    sudo apt update
    sudo apt install -y software-properties-common
    sudo add-apt-repository --yes --update ppa:ansible/ansible
    sudo apt install -y ansible
    
    # install ansible 'community.general' collection for the vagrant user
    runuser -l vagrant -c 'ansible-galaxy collection install community.general'

    # copy ssh keys from host
    runuser -l vagrant -c 'cp -R /host_home/.ssh /home/vagrant'

    sudo apt install -y git

    runuser -l vagrant -c 'mkdir $HOME/code && cd $HOME/code && git clone git@github.com:sha1n/envy.git'
    # run the 'essentials' playbook from source
    runuser -l vagrant -c 'cd $HOME/code/envy && ansible-playbook ./playbooks/essentials.yml'

  SHELL
end
